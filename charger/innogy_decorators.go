package charger

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateInnogy(base *Innogy, energyImport func() (float64, error), phaseVoltages func() (float64, float64, float64, error)) api.Charger {
	switch {
	case energyImport == nil && phaseVoltages == nil:
		return base

	case energyImport != nil && phaseVoltages == nil:
		return &struct {
			*Innogy
			api.EnergyImport
		}{
			Innogy: base,
			EnergyImport: &decorateInnogyEnergyImportImpl{
				energyImport: energyImport,
			},
		}

	case energyImport == nil && phaseVoltages != nil:
		return &struct {
			*Innogy
			api.PhaseVoltages
		}{
			Innogy: base,
			PhaseVoltages: &decorateInnogyPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case energyImport != nil && phaseVoltages != nil:
		return &struct {
			*Innogy
			api.EnergyImport
			api.PhaseVoltages
		}{
			Innogy: base,
			EnergyImport: &decorateInnogyEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseVoltages: &decorateInnogyPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}
	}

	return nil
}

type decorateInnogyEnergyImportImpl struct {
	energyImport func() (float64, error)
}

func (impl *decorateInnogyEnergyImportImpl) EnergyImport() (float64, error) {
	return impl.energyImport()
}

type decorateInnogyPhaseVoltagesImpl struct {
	phaseVoltages func() (float64, float64, float64, error)
}

func (impl *decorateInnogyPhaseVoltagesImpl) Voltages() (float64, float64, float64, error) {
	return impl.phaseVoltages()
}

package charger

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateKeba(base *Keba, meter func() (float64, error), energyImport func() (float64, error), phaseCurrents func() (float64, float64, float64, error), identifier func() (string, error), statusReasoner func() (api.Reason, error), phaseSwitcher func(int) error, phaseGetter func() (int, error)) api.Charger {
	switch {
	case energyImport == nil && identifier == nil && meter == nil && phaseSwitcher == nil && statusReasoner == nil:
		return base

	case energyImport == nil && identifier == nil && meter != nil && phaseCurrents == nil && phaseSwitcher == nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.Meter
		}{
			Keba: base,
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
		}

	case energyImport != nil && identifier == nil && meter == nil && phaseSwitcher == nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
		}

	case energyImport != nil && identifier == nil && meter != nil && phaseCurrents == nil && phaseSwitcher == nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Meter
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
		}

	case energyImport == nil && identifier == nil && meter != nil && phaseCurrents != nil && phaseSwitcher == nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.Meter
			api.PhaseCurrents
		}{
			Keba: base,
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case energyImport != nil && identifier == nil && meter != nil && phaseCurrents != nil && phaseSwitcher == nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Meter
			api.PhaseCurrents
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case energyImport == nil && identifier != nil && meter == nil && phaseSwitcher == nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.Identifier
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
		}

	case energyImport == nil && identifier != nil && meter != nil && phaseCurrents == nil && phaseSwitcher == nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.Identifier
			api.Meter
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
		}

	case energyImport != nil && identifier != nil && meter == nil && phaseSwitcher == nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
		}

	case energyImport != nil && identifier != nil && meter != nil && phaseCurrents == nil && phaseSwitcher == nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
			api.Meter
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
		}

	case energyImport == nil && identifier != nil && meter != nil && phaseCurrents != nil && phaseSwitcher == nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.Identifier
			api.Meter
			api.PhaseCurrents
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case energyImport != nil && identifier != nil && meter != nil && phaseCurrents != nil && phaseSwitcher == nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
			api.Meter
			api.PhaseCurrents
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case energyImport == nil && identifier == nil && meter == nil && phaseSwitcher == nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.StatusReasoner
		}{
			Keba: base,
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport == nil && identifier == nil && meter != nil && phaseCurrents == nil && phaseSwitcher == nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.Meter
			api.StatusReasoner
		}{
			Keba: base,
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier == nil && meter == nil && phaseSwitcher == nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier == nil && meter != nil && phaseCurrents == nil && phaseSwitcher == nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Meter
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport == nil && identifier == nil && meter != nil && phaseCurrents != nil && phaseSwitcher == nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.Meter
			api.PhaseCurrents
			api.StatusReasoner
		}{
			Keba: base,
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier == nil && meter != nil && phaseCurrents != nil && phaseSwitcher == nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Meter
			api.PhaseCurrents
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport == nil && identifier != nil && meter == nil && phaseSwitcher == nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.Identifier
			api.StatusReasoner
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport == nil && identifier != nil && meter != nil && phaseCurrents == nil && phaseSwitcher == nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.Identifier
			api.Meter
			api.StatusReasoner
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier != nil && meter == nil && phaseSwitcher == nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier != nil && meter != nil && phaseCurrents == nil && phaseSwitcher == nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
			api.Meter
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport == nil && identifier != nil && meter != nil && phaseCurrents != nil && phaseSwitcher == nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.StatusReasoner
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier != nil && meter != nil && phaseCurrents != nil && phaseSwitcher == nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport == nil && identifier == nil && meter == nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.PhaseSwitcher
		}{
			Keba: base,
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport == nil && identifier == nil && meter != nil && phaseCurrents == nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.Meter
			api.PhaseSwitcher
		}{
			Keba: base,
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport != nil && identifier == nil && meter == nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.PhaseSwitcher
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport != nil && identifier == nil && meter != nil && phaseCurrents == nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Meter
			api.PhaseSwitcher
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport == nil && identifier == nil && meter != nil && phaseCurrents != nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.Meter
			api.PhaseCurrents
			api.PhaseSwitcher
		}{
			Keba: base,
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport != nil && identifier == nil && meter != nil && phaseCurrents != nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Meter
			api.PhaseCurrents
			api.PhaseSwitcher
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport == nil && identifier != nil && meter == nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.Identifier
			api.PhaseSwitcher
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport == nil && identifier != nil && meter != nil && phaseCurrents == nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.Identifier
			api.Meter
			api.PhaseSwitcher
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport != nil && identifier != nil && meter == nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
			api.PhaseSwitcher
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport != nil && identifier != nil && meter != nil && phaseCurrents == nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
			api.Meter
			api.PhaseSwitcher
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport == nil && identifier != nil && meter != nil && phaseCurrents != nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.PhaseSwitcher
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport != nil && identifier != nil && meter != nil && phaseCurrents != nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.PhaseSwitcher
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport == nil && identifier == nil && meter == nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport == nil && identifier == nil && meter != nil && phaseCurrents == nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.Meter
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier == nil && meter == nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier == nil && meter != nil && phaseCurrents == nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Meter
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport == nil && identifier == nil && meter != nil && phaseCurrents != nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.Meter
			api.PhaseCurrents
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier == nil && meter != nil && phaseCurrents != nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Meter
			api.PhaseCurrents
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport == nil && identifier != nil && meter == nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.Identifier
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport == nil && identifier != nil && meter != nil && phaseCurrents == nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.Identifier
			api.Meter
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier != nil && meter == nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier != nil && meter != nil && phaseCurrents == nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
			api.Meter
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport == nil && identifier != nil && meter != nil && phaseCurrents != nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier != nil && meter != nil && phaseCurrents != nil && phaseGetter == nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport == nil && identifier == nil && meter == nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.PhaseGetter
			api.PhaseSwitcher
		}{
			Keba: base,
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport == nil && identifier == nil && meter != nil && phaseCurrents == nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.Meter
			api.PhaseGetter
			api.PhaseSwitcher
		}{
			Keba: base,
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport != nil && identifier == nil && meter == nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.PhaseGetter
			api.PhaseSwitcher
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport != nil && identifier == nil && meter != nil && phaseCurrents == nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Meter
			api.PhaseGetter
			api.PhaseSwitcher
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport == nil && identifier == nil && meter != nil && phaseCurrents != nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.Meter
			api.PhaseCurrents
			api.PhaseGetter
			api.PhaseSwitcher
		}{
			Keba: base,
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport != nil && identifier == nil && meter != nil && phaseCurrents != nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Meter
			api.PhaseCurrents
			api.PhaseGetter
			api.PhaseSwitcher
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport == nil && identifier != nil && meter == nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.Identifier
			api.PhaseGetter
			api.PhaseSwitcher
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport == nil && identifier != nil && meter != nil && phaseCurrents == nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.Identifier
			api.Meter
			api.PhaseGetter
			api.PhaseSwitcher
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport != nil && identifier != nil && meter == nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
			api.PhaseGetter
			api.PhaseSwitcher
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport != nil && identifier != nil && meter != nil && phaseCurrents == nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
			api.Meter
			api.PhaseGetter
			api.PhaseSwitcher
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport == nil && identifier != nil && meter != nil && phaseCurrents != nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.PhaseGetter
			api.PhaseSwitcher
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport != nil && identifier != nil && meter != nil && phaseCurrents != nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner == nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.PhaseGetter
			api.PhaseSwitcher
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
		}

	case energyImport == nil && identifier == nil && meter == nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.PhaseGetter
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport == nil && identifier == nil && meter != nil && phaseCurrents == nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.Meter
			api.PhaseGetter
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier == nil && meter == nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.PhaseGetter
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier == nil && meter != nil && phaseCurrents == nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Meter
			api.PhaseGetter
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport == nil && identifier == nil && meter != nil && phaseCurrents != nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.Meter
			api.PhaseCurrents
			api.PhaseGetter
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier == nil && meter != nil && phaseCurrents != nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Meter
			api.PhaseCurrents
			api.PhaseGetter
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport == nil && identifier != nil && meter == nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.Identifier
			api.PhaseGetter
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport == nil && identifier != nil && meter != nil && phaseCurrents == nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.Identifier
			api.Meter
			api.PhaseGetter
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier != nil && meter == nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
			api.PhaseGetter
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier != nil && meter != nil && phaseCurrents == nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
			api.Meter
			api.PhaseGetter
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport == nil && identifier != nil && meter != nil && phaseCurrents != nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.PhaseGetter
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}

	case energyImport != nil && identifier != nil && meter != nil && phaseCurrents != nil && phaseGetter != nil && phaseSwitcher != nil && statusReasoner != nil:
		return &struct {
			*Keba
			api.EnergyImport
			api.Identifier
			api.Meter
			api.PhaseCurrents
			api.PhaseGetter
			api.PhaseSwitcher
			api.StatusReasoner
		}{
			Keba: base,
			EnergyImport: &decorateKebaEnergyImportImpl{
				energyImport: energyImport,
			},
			Identifier: &decorateKebaIdentifierImpl{
				identifier: identifier,
			},
			Meter: &decorateKebaMeterImpl{
				meter: meter,
			},
			PhaseCurrents: &decorateKebaPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseGetter: &decorateKebaPhaseGetterImpl{
				phaseGetter: phaseGetter,
			},
			PhaseSwitcher: &decorateKebaPhaseSwitcherImpl{
				phaseSwitcher: phaseSwitcher,
			},
			StatusReasoner: &decorateKebaStatusReasonerImpl{
				statusReasoner: statusReasoner,
			},
		}
	}

	return nil
}

type decorateKebaEnergyImportImpl struct {
	energyImport func() (float64, error)
}

func (impl *decorateKebaEnergyImportImpl) EnergyImport() (float64, error) {
	return impl.energyImport()
}

type decorateKebaIdentifierImpl struct {
	identifier func() (string, error)
}

func (impl *decorateKebaIdentifierImpl) Identify() (string, error) {
	return impl.identifier()
}

type decorateKebaMeterImpl struct {
	meter func() (float64, error)
}

func (impl *decorateKebaMeterImpl) CurrentPower() (float64, error) {
	return impl.meter()
}

type decorateKebaPhaseCurrentsImpl struct {
	phaseCurrents func() (float64, float64, float64, error)
}

func (impl *decorateKebaPhaseCurrentsImpl) Currents() (float64, float64, float64, error) {
	return impl.phaseCurrents()
}

type decorateKebaPhaseGetterImpl struct {
	phaseGetter func() (int, error)
}

func (impl *decorateKebaPhaseGetterImpl) GetPhases() (int, error) {
	return impl.phaseGetter()
}

type decorateKebaPhaseSwitcherImpl struct {
	phaseSwitcher func(int) error
}

func (impl *decorateKebaPhaseSwitcherImpl) Phases1p3p(p0 int) error {
	return impl.phaseSwitcher(p0)
}

type decorateKebaStatusReasonerImpl struct {
	statusReasoner func() (api.Reason, error)
}

func (impl *decorateKebaStatusReasonerImpl) StatusReason() (api.Reason, error) {
	return impl.statusReasoner()
}

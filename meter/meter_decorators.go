package meter

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateMeter(base api.Meter, energyImport func() (float64, error), energyExport func() (float64, error), phaseCurrents func() (float64, float64, float64, error), phaseVoltages func() (float64, float64, float64, error), phasePowers func() (float64, float64, float64, error), battery func() (float64, error), batteryCapacity func() float64, maxACPower func() float64, batteryController func(api.BatteryMode) error) api.Meter {
	switch {
	case battery == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return base

	case battery == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyImport
		}{
			Meter: base,
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
		}

	case battery == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyExport
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
		}

	case battery == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.EnergyImport
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
		}

	case battery == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.PhaseCurrents
		}{
			Meter: base,
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyImport
			api.PhaseCurrents
		}{
			Meter: base,
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.PhaseCurrents
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.PhaseVoltages
		}{
			Meter: base,
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyImport
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.EnergyImport
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyImport
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyImport
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.EnergyImport
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyImport
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyImport
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.EnergyImport
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyImport
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyImport
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.EnergyImport
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyImport
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyImport
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.EnergyImport
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyImport
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.MaxACPower
		}{
			Meter: base,
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyImport
			api.MaxACPower
		}{
			Meter: base,
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.MaxACPower
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyImport
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.MaxACPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyImport
			api.MaxACPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.MaxACPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyImport
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.MaxACPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyImport
			api.MaxACPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.MaxACPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyImport
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController == nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyImport
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyImport
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyImport
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyImport
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyImport
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyImport
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyImport
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyImport
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower == nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.MaxACPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyImport
			api.MaxACPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.MaxACPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyImport
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity == nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.MaxACPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyImport
			api.MaxACPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.MaxACPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyImport
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers == nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages == nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport == nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport == nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}

	case battery != nil && batteryCapacity != nil && batteryController != nil && energyExport != nil && energyImport != nil && maxACPower != nil && phaseCurrents != nil && phasePowers != nil && phaseVoltages != nil:
		return &struct {
			api.Meter
			api.Battery
			api.BatteryCapacity
			api.BatteryController
			api.EnergyExport
			api.EnergyImport
			api.MaxACPower
			api.PhaseCurrents
			api.PhasePowers
			api.PhaseVoltages
		}{
			Meter: base,
			Battery: &decorateMeterBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateMeterBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			BatteryController: &decorateMeterBatteryControllerImpl{
				batteryController: batteryController,
			},
			EnergyExport: &decorateMeterEnergyExportImpl{
				energyExport: energyExport,
			},
			EnergyImport: &decorateMeterEnergyImportImpl{
				energyImport: energyImport,
			},
			MaxACPower: &decorateMeterMaxACPowerImpl{
				maxACPower: maxACPower,
			},
			PhaseCurrents: &decorateMeterPhaseCurrentsImpl{
				phaseCurrents: phaseCurrents,
			},
			PhasePowers: &decorateMeterPhasePowersImpl{
				phasePowers: phasePowers,
			},
			PhaseVoltages: &decorateMeterPhaseVoltagesImpl{
				phaseVoltages: phaseVoltages,
			},
		}
	}

	return nil
}

type decorateMeterBatteryImpl struct {
	battery func() (float64, error)
}

func (impl *decorateMeterBatteryImpl) Soc() (float64, error) {
	return impl.battery()
}

type decorateMeterBatteryCapacityImpl struct {
	batteryCapacity func() float64
}

func (impl *decorateMeterBatteryCapacityImpl) Capacity() float64 {
	return impl.batteryCapacity()
}

type decorateMeterBatteryControllerImpl struct {
	batteryController func(api.BatteryMode) error
}

func (impl *decorateMeterBatteryControllerImpl) SetBatteryMode(p0 api.BatteryMode) error {
	return impl.batteryController(p0)
}

type decorateMeterEnergyExportImpl struct {
	energyExport func() (float64, error)
}

func (impl *decorateMeterEnergyExportImpl) EnergyExport() (float64, error) {
	return impl.energyExport()
}

type decorateMeterEnergyImportImpl struct {
	energyImport func() (float64, error)
}

func (impl *decorateMeterEnergyImportImpl) EnergyImport() (float64, error) {
	return impl.energyImport()
}

type decorateMeterMaxACPowerImpl struct {
	maxACPower func() float64
}

func (impl *decorateMeterMaxACPowerImpl) MaxACPower() float64 {
	return impl.maxACPower()
}

type decorateMeterPhaseCurrentsImpl struct {
	phaseCurrents func() (float64, float64, float64, error)
}

func (impl *decorateMeterPhaseCurrentsImpl) Currents() (float64, float64, float64, error) {
	return impl.phaseCurrents()
}

type decorateMeterPhasePowersImpl struct {
	phasePowers func() (float64, float64, float64, error)
}

func (impl *decorateMeterPhasePowersImpl) Powers() (float64, float64, float64, error) {
	return impl.phasePowers()
}

type decorateMeterPhaseVoltagesImpl struct {
	phaseVoltages func() (float64, float64, float64, error)
}

func (impl *decorateMeterPhaseVoltagesImpl) Voltages() (float64, float64, float64, error) {
	return impl.phaseVoltages()
}

package meter

// Code generated by github.com/evcc-io/evcc/cmd/tools/decorate.go. DO NOT EDIT.

import (
	"github.com/evcc-io/evcc/api"
)

func decorateLgEss(base *LgEss, energyImport func() (float64, error), battery func() (float64, error), batteryCapacity func() float64) api.Meter {
	switch {
	case battery == nil && energyImport == nil:
		return base

	case battery == nil && energyImport != nil:
		return &struct {
			*LgEss
			api.EnergyImport
		}{
			LgEss: base,
			EnergyImport: &decorateLgEssEnergyImportImpl{
				energyImport: energyImport,
			},
		}

	case battery != nil && batteryCapacity == nil && energyImport == nil:
		return &struct {
			*LgEss
			api.Battery
		}{
			LgEss: base,
			Battery: &decorateLgEssBatteryImpl{
				battery: battery,
			},
		}

	case battery != nil && batteryCapacity == nil && energyImport != nil:
		return &struct {
			*LgEss
			api.Battery
			api.EnergyImport
		}{
			LgEss: base,
			Battery: &decorateLgEssBatteryImpl{
				battery: battery,
			},
			EnergyImport: &decorateLgEssEnergyImportImpl{
				energyImport: energyImport,
			},
		}

	case battery != nil && batteryCapacity != nil && energyImport == nil:
		return &struct {
			*LgEss
			api.Battery
			api.BatteryCapacity
		}{
			LgEss: base,
			Battery: &decorateLgEssBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateLgEssBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
		}

	case battery != nil && batteryCapacity != nil && energyImport != nil:
		return &struct {
			*LgEss
			api.Battery
			api.BatteryCapacity
			api.EnergyImport
		}{
			LgEss: base,
			Battery: &decorateLgEssBatteryImpl{
				battery: battery,
			},
			BatteryCapacity: &decorateLgEssBatteryCapacityImpl{
				batteryCapacity: batteryCapacity,
			},
			EnergyImport: &decorateLgEssEnergyImportImpl{
				energyImport: energyImport,
			},
		}
	}

	return nil
}

type decorateLgEssBatteryImpl struct {
	battery func() (float64, error)
}

func (impl *decorateLgEssBatteryImpl) Soc() (float64, error) {
	return impl.battery()
}

type decorateLgEssBatteryCapacityImpl struct {
	batteryCapacity func() float64
}

func (impl *decorateLgEssBatteryCapacityImpl) Capacity() float64 {
	return impl.batteryCapacity()
}

type decorateLgEssEnergyImportImpl struct {
	energyImport func() (float64, error)
}

func (impl *decorateLgEssEnergyImportImpl) EnergyImport() (float64, error) {
	return impl.energyImport()
}
